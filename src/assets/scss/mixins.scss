@use "sass:math";

// takes a list of selectors and adds % and a class for each
/* 
@include prefix(h1, h2) {
  @content;
}

output:
%h1, .h1, h1, %h2, .h2, h2  {
  @content;
}
  */
@mixin prefix($selectors...) {
  @each $selector in $selectors {
    %#{$selector},
    .#{$selector},
    #{$selector} {
      @content;
    }
  }
}

// seperates a color into r,g,b,a css vars and hsl vars
@mixin color($name, $value) {
  --color-#{$name}: #{$value};
  --color-#{$name}-r: #{red($value)};
  --color-#{$name}-g: #{green($value)};
  --color-#{$name}-b: #{blue($value)};
  --color-#{$name}-a: #{alpha($value)};
  --color-#{$name}-h: #{hue($value)};
  --color-#{$name}-s: #{saturation($value)};
  --color-#{$name}-l: #{lightness($value)};
}

@function hsl-var($name, $h: 0, $s: 0, $l: 0) {
  $color: --color-#{$name};

  // if hue is not 0 then we need to calculate the hue
  $h-var: if($h == 0, var(#{$color}-h), calc(var(#{$color}-h) + #{$h}));
  $s-var: if($s == 0, var(#{$color}-s), calc(var(#{$color}-s) + #{$s}));
  $l-var: if($l == 0, var(#{$color}-l), calc(var(#{$color}-l) + #{$l}));

  @return hsl(#{$h-var}, #{$s-var}, #{$l-var});
}

@mixin active {
  &:where(:hover, :focus),
  a:where(:hover, :focus) & {
    @content;
  }
}

// settings
$rfs-base: 16px;
$rfs-min: 320px;
$rfs-max: 800px;

// mixins
@function interpolate($from, $to, $fromWidth, $toWidth) {
  // $slope: ($to - $from) / ($toWidth - $fromWidth);
  $slope: math.div($to - $from, $toWidth - $fromWidth);
  $base: $from - $slope * $fromWidth;

  @return calc(#{$base} + #{100vw * $slope});
}

@function rfs-value($desired-size, $min-size: 0) {
  @if ($min-size == 0) {
    $min-size: $rfs-base;
  }
  $rfs: interpolate($min-size, $desired-size, $rfs-min, $rfs-max);

  @return clamp(#{$min-size}, #{$rfs}, #{$desired-size});
}
